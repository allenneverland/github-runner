# 多階段建置 - 第一階段：建置工具和環境
FROM myoung34/github-runner:latest as builder

USER root

# 更新套件列表
RUN apt-get update

# 安裝建置時需要的工具
RUN apt-get install -y \
    curl \
    wget \
    git \
    unzip \
    zip \
    build-essential \
    pkg-config \
    libssl-dev \
    ca-certificates \
    gnupg \
    lsb-release

# 安裝 Node.js 20.x (官方 APT repository) - 支援最新 npm
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# 確認 Node.js 版本並安裝全域套件
RUN node --version && npm --version \
    && npm install -g \
        yarn \
        pnpm \
        typescript \
        ts-node \
        eslint \
        prettier \
        @vue/cli \
        @angular/cli \
        create-react-app

# 安裝 Rust (for builder stage)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# 安裝 Rust 工具
RUN ~/.cargo/bin/cargo install \
    sqlx-cli \
    diesel_cli \
    cargo-watch \
    cargo-edit \
    cargo-audit \
    && ~/.cargo/bin/cargo cache --autoclean

# 安裝 Docker Compose
RUN curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
    -o /usr/local/bin/docker-compose \
    && chmod +x /usr/local/bin/docker-compose

# 第二階段：最終映像
FROM myoung34/github-runner:latest as final

USER root

# 只安裝必要的執行時工具
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    jq \
    netcat \
    tree \
    vim \
    nano \
    build-essential \
    pkg-config \
    libssl-dev \
    ca-certificates \
    # 資料庫客戶端工具
    postgresql-client \
    mysql-client \
    redis-tools \
    sqlite3 \
    # Python 環境
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    # 清理快取
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# 從 builder 階段複製 Node.js 20.x 和 npm 套件
COPY --from=builder /usr/bin/node /usr/bin/node
COPY --from=builder /usr/bin/npm /usr/bin/npm
COPY --from=builder /usr/bin/npx /usr/bin/npx
COPY --from=builder /usr/bin/yarn /usr/bin/yarn
COPY --from=builder /usr/bin/corepack /usr/bin/corepack
COPY --from=builder /usr/lib/node_modules /usr/lib/node_modules
COPY --from=builder /usr/include/node /usr/include/node

# 從 builder 階段複製 Docker Compose
COPY --from=builder /usr/local/bin/docker-compose /usr/local/bin/docker-compose

# 切換到 runner 用戶
USER runner

# 為 runner 用戶安裝 Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
    && echo 'source ~/.cargo/env' >> ~/.bashrc

# 設定環境變數
ENV PATH="/home/runner/.cargo/bin:/home/runner/.local/bin:${PATH}"

# 從 builder 階段複製已編譯的 Rust 工具
COPY --from=builder --chown=runner:runner /root/.cargo/bin/sqlx /home/runner/.cargo/bin/
COPY --from=builder --chown=runner:runner /root/.cargo/bin/diesel /home/runner/.cargo/bin/
COPY --from=builder --chown=runner:runner /root/.cargo/bin/cargo-watch /home/runner/.cargo/bin/
COPY --from=builder --chown=runner:runner /root/.cargo/bin/cargo-edit /home/runner/.cargo/bin/
COPY --from=builder --chown=runner:runner /root/.cargo/bin/cargo-audit /home/runner/.cargo/bin/

# 安裝 Python 套件 (只安裝最必要的)
RUN python3 -m pip install --user --no-cache-dir \
    pip \
    setuptools \
    wheel \
    pytest \
    black \
    flake8 \
    requests \
    sqlalchemy \
    psycopg2-binary \
    redis \
    celery

# 創建快取目錄
RUN mkdir -p /home/runner/.cargo/registry \
    && mkdir -p /home/runner/.cargo/git \
    && mkdir -p /home/runner/.npm \
    && mkdir -p /home/runner/.cache/pip

# 設定快取權限
RUN chown -R runner:runner /home/runner/.cargo \
    && chown -R runner:runner /home/runner/.npm \
    && chown -R runner:runner /home/runner/.cache

# 預熱一些常用的依賴快取
RUN cd /tmp \
    && /home/runner/.cargo/bin/cargo init --name cache-warmup \
    && echo 'serde = { version = "1.0", features = ["derive"] }' >> Cargo.toml \
    && echo 'tokio = { version = "1.0", features = ["full"] }' >> Cargo.toml \
    && echo 'sqlx = { version = "0.8", features = ["runtime-tokio-rustls", "postgres", "chrono", "uuid"] }' >> Cargo.toml \
    && /home/runner/.cargo/bin/cargo fetch \
    && rm -rf /tmp/cache-warmup

# 設定工作目錄
WORKDIR /home/runner

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep -f "Runner.Listener" || exit 1